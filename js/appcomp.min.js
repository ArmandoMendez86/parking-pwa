import { logoImg } from "./logo.js";
let db,
  estado = "pendiente",
  tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]'),
  tooltipList = [...tooltipTriggerList].map((e) => new bootstrap.Tooltip(e)),
  request =
    (document.querySelector(".navbar").addEventListener("dblclick", () => {
      document.querySelector("#reporte").removeAttribute("disabled");
    }),
    indexedDB.open("Parking", 4));
async function cargarDatosIniciales() {
  await configurarFormularios(),
    await cargarCategorias(),
    await cargarClientes(),
    await cargarPensiones(),
    await cargarServicios(),
    await configuracionSistema();
}
async function configurarFormularios() {
  document
    .getElementById("formEstacionamiento")
    .addEventListener("submit", async (e) => {
      e.preventDefault();
      var e = moment().format("YYYY-MM-DD HH:mm:ss"),
        t = moment(e),
        o = document.getElementById("placaE").value,
        a = document.getElementById("categoria").value,
        r = document.getElementById("marcaE").value,
        n = document.getElementById("colorE").value,
        i = generarFolio(await obtenerRegistrosEstacionamiento());
      "" != r &&
        "" != n &&
        (await agregarRegistro("estacionamiento", {
          placa: o,
          categoria: a,
          marca: r,
          color: n,
          fechaEntrada: e,
          estado: estado,
          folio: i,
        }),
        imprimirPlantilla(
          (a = await configuracionSistema()).negocio,
          a.direccion,
          t,
          "",
          "",
          "",
          i,
          a.mensaje,
          o,
          n
        ));
    }),
    document
      .getElementById("formPension")
      .addEventListener("submit", async (e) => {
        e.preventDefault();
        e = moment().format("YYYY-MM-DD HH:mm:ss");
        agregarRegistro("pension", {
          cliente: document.getElementById("cliente").value,
          tipo: document.getElementById("tipo").value,
          marca: document.getElementById("marca").value,
          color: document.getElementById("color").value,
          folio: generarFolio(await obtenerRegistrosPension()),
          fechaEntrada: e,
        });
      }),
    document
      .getElementById("formTipoPension")
      .addEventListener("submit", (e) => {
        e.preventDefault(),
          agregarRegistro("tipopension", {
            pension: document.getElementById("tipoPension").value,
            precio: document.getElementById("precioPension").value,
          }),
          cargarPensiones();
      }),
    document
      .getElementById("formTipoServicios")
      .addEventListener("submit", (e) => {
        e.preventDefault(),
          agregarRegistro("tiposervicios", {
            tipoServicio: document.getElementById("tipoServicio").value,
            precioServicio: document.getElementById("precioServicio").value,
          }),
          cargarServicios();
      }),
    document.getElementById("formClientes").addEventListener("submit", (e) => {
      e.preventDefault(),
        agregarRegistro("clientes", {
          nombre: document.getElementById("nombreC").value,
          telefono: document.getElementById("telefonoC").value,
        }),
        cargarClientes();
    }),
    document.getElementById("formServicios").addEventListener("submit", (e) => {
      e.preventDefault(),
        agregarRegistro("servicios", {
          tipo: document.getElementById("servicio").value,
          cantidad: document.getElementById("cantidadServicio").value,
        });
    }),
    document.getElementById("formGastos").addEventListener("submit", (e) => {
      e.preventDefault(),
        agregarRegistro("gastos", {
          concepto: document.getElementById("concepto").value,
          cantidad: document.getElementById("cantidadGasto").value,
        });
    }),
    document.getElementById("formPrecios").addEventListener("submit", (e) => {
      e.preventDefault(),
        agregarRegistro("precios", {
          categoria: document.getElementById("categoriaP").value,
          precioHora: document.getElementById("precioHora").value,
          precioFraccion: document.getElementById("precioFraccion").value,
          minimo: document.getElementById("minimo").value,
          maximo: document.getElementById("maximo").value,
        }),
        cargarCategorias();
    }),
    document
      .getElementById("formUsuarios")
      .addEventListener("submit", async (e) => {
        e.preventDefault(),
          (
            await guardarUsuario({
              usuario: document.getElementById("nombre").value,
              password: document.getElementById("password").value,
              perfil: document.getElementById("perfil").value,
            })
          ).success &&
            (alert("Usuario guardado!"),
            document.getElementById("formUsuarios").reset());
      }),
    document
      .getElementById("formConfiguracion")
      .addEventListener("submit", (e) => {
        e.preventDefault(),
          agregarRegistro("sistema", {
            negocio: document.getElementById("nombreNegocio").value,
            direccion: document.getElementById("direccionNegocio").value,
            telefono: document.getElementById("telefonoNegocio").value,
            mensaje: document.getElementById("mensajeNegocio").value,
          });
      });
}
async function agregarRegistro(a, r) {
  return new Promise((e, t) => {
    let o = db.transaction(a, "readwrite").objectStore(a).add(r);
    (o.onsuccess = () => {
      console.log("Registro agregado con éxito"),
        document.querySelectorAll("form").forEach((e) => {
          "formConfiguracion" !== e.id && e.reset();
        }),
        alert("Registro guardado correctamente"),
        e(o.result);
    }),
      (o.onerror = (e) => {
        console.error("Error al agregar el registro:", e.target.error),
          alert("Error al guardar el registro"),
          t(e.target.error);
      });
  });
}
function eliminarRegistro(e, t) {
  e = db.transaction(e, "readwrite").objectStore(e).delete(t);
  (e.onsuccess = () => {
    console.log("Registro eliminado con éxito"),
      alert("Registro eliminado correctamente");
  }),
    (e.onerror = (e) => {
      console.error("Error al eliminar el registro:", e.target.error),
        alert("Error al eliminar el registro");
    });
}
function actualizarRegistro(e, t) {
  e = db.transaction(e, "readwrite").objectStore(e).put(t);
  (e.onsuccess = () => {
    console.log("Registro actualizado con éxito:", t),
      alert("Registro actualizado correctamente");
  }),
    (e.onerror = (e) => {
      console.error("Error al actualizar el registro:", e.target.error),
        alert("Error al actualizar el registro");
    });
}
async function cargarCategorias() {
  let t = db.transaction("precios", "readonly").objectStore("precios").getAll();
  t.onsuccess = () => {
    let o = document.getElementById("categoria");
    o.innerHTML = "";
    var e = document.createElement("option");
    (e.value = ""),
      (e.text = "Selecciona una categoria"),
      o.appendChild(e),
      t.result.forEach((e) => {
        var t = document.createElement("option");
        (t.value = e.id), (t.text = e.categoria), o.appendChild(t);
      });
  };
}
async function cargarClientes() {
  let t = db
    .transaction("clientes", "readonly")
    .objectStore("clientes")
    .getAll();
  t.onsuccess = () => {
    let o = document.getElementById("cliente");
    o.innerHTML = "";
    var e = document.createElement("option");
    (e.value = ""),
      (e.text = "Selecciona un cliente"),
      o.appendChild(e),
      t.result.forEach((e) => {
        var t = document.createElement("option");
        (t.value = e.id), (t.text = e.nombre), o.appendChild(t);
      });
  };
}
async function cargarPensiones() {
  let t = db
    .transaction("tipopension", "readonly")
    .objectStore("tipopension")
    .getAll();
  t.onsuccess = () => {
    let o = document.getElementById("tipo");
    o.innerHTML = "";
    var e = document.createElement("option");
    (e.value = ""),
      (e.text = "Selecciona tipo de pension"),
      o.appendChild(e),
      t.result.forEach((e) => {
        var t = document.createElement("option");
        (t.value = e.id), (t.text = e.pension), o.appendChild(t);
      });
  };
}
async function cargarServicios() {
  let t = db
    .transaction("tiposervicios", "readonly")
    .objectStore("tiposervicios")
    .getAll();
  t.onsuccess = () => {
    let o = document.getElementById("servicio");
    o.innerHTML = "";
    var e = document.createElement("option");
    (e.value = ""),
      (e.text = "Selecciona tipo de servicio"),
      o.appendChild(e),
      t.result.forEach((e) => {
        var t = document.createElement("option");
        (t.value = e.id), (t.text = e.tipoServicio), o.appendChild(t);
      });
  };
}
async function configuracionSistema() {
  var e = await cargarDatosSistema(),
    e = e[e.length - 1];
  return (
    (document.querySelector("#nombreNegocio").value = e.negocio),
    (document.querySelector("#direccionNegocio").value = e.direccion),
    (document.querySelector("#telefonoNegocio").value = e.telefono),
    (document.querySelector("#mensajeNegocio").value = e.mensaje),
    e
  );
}
function generarFolio(e) {
  let t = new Date()
    .toLocaleString("default", { month: "short" })
    .toUpperCase();
  var e = e.filter((e) => e && e.folio && e.folio.startsWith(t));
  return 0 === e.length
    ? t + "-0001"
    : ((e = e.reduce((e, t) => {
        var o = parseInt(t.folio.split("-")[1]);
        return parseInt(e.folio.split("-")[1]) < o ? t : e;
      })),
      (e = (parseInt(e.folio.split("-")[1]) + 1).toString().padStart(4, "0")),
      t + "-" + e);
}
async function obtenerRegistrosEstacionamiento() {
  return new Promise((e, t) => {
    let o = db
      .transaction("estacionamiento", "readonly")
      .objectStore("estacionamiento")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function obtenerRegistroPorIdEstacionamiento(a) {
  return new Promise((e, t) => {
    let o = db
      .transaction("estacionamiento", "readonly")
      .objectStore("estacionamiento")
      .get(a);
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function obtenerRegistrosPension() {
  return new Promise((e, t) => {
    let o = db
      .transaction("pension", "readonly")
      .objectStore("pension")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function obtenerRegistrosServicios() {
  return new Promise((e, t) => {
    let o = db
      .transaction("servicios", "readonly")
      .objectStore("servicios")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function obtenerRegistrosGastos() {
  return new Promise((e, t) => {
    let o = db.transaction("gastos", "readonly").objectStore("gastos").getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function datosCategorias() {
  return new Promise((e, t) => {
    let o = db
      .transaction("precios", "readonly")
      .objectStore("precios")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function datosTipoPension() {
  return new Promise((e, t) => {
    let o = db
      .transaction("tipopension", "readonly")
      .objectStore("tipopension")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function datosTipoServicio() {
  return new Promise((e, t) => {
    let o = db
      .transaction("tiposervicios", "readonly")
      .objectStore("tiposervicios")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
async function cargarDatosSistema() {
  return new Promise((e, t) => {
    let o = db
      .transaction("sistema", "readonly")
      .objectStore("sistema")
      .getAll();
    (o.onsuccess = () => {
      e(o.result);
    }),
      (o.onerror = () => {
        t(o.error);
      });
  });
}
function calcularCostoTotal(t, e) {
  var o = moment(),
    o = moment.duration(o.diff(t)).asMinutes();
  let a = 0;
  var r = parseFloat(e.minimo),
    n = parseFloat(e.maximo),
    i = parseFloat(e.precioFraccion),
    t = parseFloat(e.precioHora);
  if (o <= 60) a += t;
  else {
    a += t;
    let e = o - 60;
    for (; 0 < e && e >= r; ) (a += i), (e -= n);
  }
  return a;
}
function imprimirPlantilla(
  e,
  t,
  o,
  a,
  r,
  n,
  i,
  c = "Gracias por su preferencia!",
  s = "",
  l = ""
) {
  let d = window.open("", "_blank");
  d.document.write(`
      <html>
      <head>
          <title>Recibo de Estacionamiento</title>
          <style>
              .ticket {
                  position:relative;
                  width: 300px;
                  margin: 20px auto;
                  border: 1px dashed #ccc;
                  padding: 20px;
              }

              #folioNum{
                  position:absolute;
                  right:0;
                  top:0;
                  padding: 0.5rem;
              }
              .logo {
                  text-align: center;
                  margin-bottom: 10px;
              }
              .logo img {
                  max-width: 130px;
              }

              .logo p{
                padding:0;
                margin:0;
                margin-top:20px;
                text-transform:uppercase;
              }

              .logo small{
                padding:0;          
              }
              .details {
                  margin-bottom: 20px;
                  text-align: center;
              }
              .barcode {
                  text-align: center;
                  margin-top: 10px; 
              }
              .barcode svg {
                  width: 100%; /* O un ancho fijo si lo prefieres */
                  max-width: 280px; /* Ancho máximo para evitar que se salga del ticket */
                  height: auto; /* Altura automática para mantener la proporción */
              }
              .horasC{
                display:flex;
                justify-content: center;
              }
              .horasJ{
                display:flex;
                justify-content: space-between;
              }
              .horas > p {
                  font-size: 14px;
              }

              .mensajeC{
                font-size:12px;
                text-align:center;
                text-transform:uppercase;
              }
              .mensajeJ{
                font-size:12px;
                text-align:justify;
                text-transform:uppercase;
              }
              
              @media print {
                  .barcode svg {
                      width: 100%; /* Asegura el ancho completo en la impresión */
                      max-width: 280px; /* Ancho máximo para evitar que se salga del ticket */
                      height: auto; /* Altura automática para mantener la proporción */
                  }
              }
          </style>
      </head>
      <body>
          <div class="ticket">
              <div id="folioNum">${i}</div>
              <div class="logo">
                  <img src="${logoImg}" alt="" />
                  <p>${e}</p>
                  <small id="direccion">${t}</small>
              </div>
              <div class="details">
                  <h5>RECIBO DE ESTACIONAMIENTO</h5>
                  <p>${o.format("DD/MM/YYYY")}</p>
                  <div class="${"" != a ? "horasJ" : "horasC"}">
                      <p>Entrada: ${o.format("hh:mm A")}</p>
                      <p>${"" != a ? "Salida: " + a : ""}</p>
                  </div>
                  <div class="horasJ">
                      <p>${"" != s ? "Placa: " + s : ""}</p>
                      <p>${"" != l ? "Color: " + l : ""}</p>
                  </div>
                  <p>${"" != r ? `Tiempo: ${r} minutos` : ""}</p>
                  <p>${"" != n ? "Monto: $" + n : ""}</p>
              </div>
              <div class="barcode">
                  <svg id="codigoBarras"></svg>
              </div>
              <p class=" ${"" != a ? "mensajeC" : "mensajeJ"} ">${c}</p>
          </div>
      </body>
      </html>
  `),
    d.document.close(),
    (d.onload = function () {
      JsBarcode(d.document.querySelector("#codigoBarras"), i, {
        format: "CODE128",
        lineColor: "#808080",
        width: 1.5,
        height: 40,
        displayValue: !1,
        margin: 0,
      }),
        d.print(),
        setTimeout(() => {
          d.close();
        }, 500);
    });
}
function imprimirPlantillaPension(e, t, o, a, r, n, i, c, s) {
  let l = window.open("", "_blank");
  l.document.write(`
      <html>
      <head>
          <title>Recibo de Estacionamiento</title>
          <style>
              .ticket {
                  position:relative;
                  width: 300px;
                  margin: 20px auto;
                  border: 1px dashed #ccc;
                  padding: 20px;
              }

              #folioNum{
                  position:absolute;
                  right:0;
                  top:0;
                  padding: 0.5rem;
              }
              .logo {
                  text-align: center;
                  margin-bottom: 10px;
              }
              .logo > p{
                text-transform:uppercase;
              }
              .logo img {
                  max-width: 130px;
              }
              .details {
                  margin-bottom: 20px;
                  text-align: center;
              }
              .barcode {
                  text-align: center;
                  margin-top: 10px; /* Espacio arriba del código de barras */
              }
              .barcode svg {
                  width: 100%; /* O un ancho fijo si lo prefieres */
                  max-width: 280px; /* Ancho máximo para evitar que se salga del ticket */
                  height: auto; /* Altura automática para mantener la proporción */
              }
              .horas{
                display:flex;
                justify-content: space-between;
              }
              .horas > p {
                  font-size: 12px;
              }
              .mensaje{
                font-size:12px;
                text-align:center;
                text-transform:uppercase;
              }
              @media print {
                  .barcode svg {
                      width: 100%; /* Asegura el ancho completo en la impresión */
                      max-width: 280px; /* Ancho máximo para evitar que se salga del ticket */
                      height: auto; /* Altura automática para mantener la proporción */
                  }
              }
          </style>
      </head>
      <body>
          <div class="ticket">
              <div>${n}</div>
              <div class="logo">
                  <img src="${logoImg}" alt="" />
                  <p>${e}</p>
                  <small id="direccion">${t}</small>
              </div>
              <div class="details">
                  <h5>RECIBO DE PENSIÓN</h5>
                  <div class="horas"">
                      <p>Entrada: ${o}</p>
                      <p>Salida: ${a}</p>
                  </div>
                  <div class="horas"">
                      <p>Placa: ${c}</p>
                      <p>Color: ${s}</p>
                  </div>
                  <p>Monto: $${r}</p>
              </div>
              <div class="barcode">
                  <svg id="codigoBarras"></svg>
              </div>
              <p class="mensaje">${i}</p>
          </div>
      </body>
      </html>
  `),
    l.document.close(),
    (l.onload = function () {
      JsBarcode(l.document.querySelector("#codigoBarras"), n, {
        format: "CODE128",
        lineColor: "#808080",
        width: 1.5,
        height: 40,
        displayValue: !1,
        margin: 0,
      }),
        l.print(),
        setTimeout(() => {
          l.close();
        }, 500);
    });
}
function abrirVentanaReporte(e, t, o, a) {
  var r = window.open("", "_blank", "width=800,height=600");
  r.document.write(`
    <html>
      <head>
        <title>Reporte de Estacionamiento</title>
        <style>
          body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 0;
          }
          .container {
            width: 80%;
            margin: 30px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
          }
          .header {
            font-size: 24px;
            color: #ff8c00;
            font-weight: bold;
            margin-bottom: 20px;
            border-bottom: 2px solid #ff8c00;
            padding-bottom: 10px;
          }
          .list-item {
            background-color: #f9f9f9;
            border-radius: 5px;
            margin: 10px 0;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 18px;
          }
          .list-item span {
            font-weight: bold;
            color: #333;
          }
          .total {
            background-color: #28a745;
            color: white;
            font-size: 20px;
            font-weight: bold;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
          }
          .total .value {
            color: #ffdd57;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">Reporte General</div>

          <div class="list-item">
            <span>Total Estacionamiento:</span>
            <span>$${e}</span>
          </div>

          <div class="list-item">
            <span>Total Gastos:</span>
            <span>$${t}</span>
          </div>

          <div class="list-item">
            <span>Total Pensiones:</span>
            <span>$${o}</span>
          </div>

          <div class="list-item">
            <span>Total Servicios:</span>
            <span>$${a}</span>
          </div>

          <div class="total">
            <span>Total General: </span>
            <span class="value">$${e + t + o + a}</span>
          </div>
        </div>
      </body>
    </html>
  `),
    r.document.close(),
    r.print();
}
async function backup(e, t, o, a) {
  try {
    return await (
      await fetch("app/controladores/ParkingController.php?action=guardar", {
        method: "POST",
        body: JSON.stringify({
          estacionamiento: e,
          pensiones: t,
          servicios: o,
          gastos: a,
        }),
        headers: { "Content-Type": "application/json" },
      })
    ).json();
  } catch (e) {
    console.log("Error en la peticion: " + e);
  }
}
async function guardarUsuario(e) {
  try {
    return await (
      await fetch("app/controladores/UsuarioController.php?action=guardar", {
        method: "POST",
        body: JSON.stringify(e),
        headers: { "Content-Type": "application/json" },
      })
    ).json();
  } catch (e) {
    console.log("Error en la peticion: " + e);
  }
}
(request.onupgradeneeded = (e) => {
  (db = e.target.result).objectStoreNames.contains("estacionamiento") ||
    db.createObjectStore("estacionamiento", {
      keyPath: "id",
      autoIncrement: !0,
    }),
    db.objectStoreNames.contains("pension") ||
      db.createObjectStore("pension", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("clientes") ||
      db.createObjectStore("clientes", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("servicios") ||
      db.createObjectStore("servicios", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("usuarios") ||
      db.createObjectStore("usuarios", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("sistema") ||
      db.createObjectStore("sistema", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("precios") ||
      db.createObjectStore("precios", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("gastos") ||
      db.createObjectStore("gastos", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("tipopension") ||
      db.createObjectStore("tipopension", { keyPath: "id", autoIncrement: !0 }),
    db.objectStoreNames.contains("tipoServicios") ||
      db.createObjectStore("tiposervicios", {
        keyPath: "id",
        autoIncrement: !0,
      });
}),
  (request.onsuccess = (e) => {
    (db = e.target.result),
      console.log("Base de datos abierta con éxito"),
      cargarDatosIniciales();
  }),
  (request.onerror = (e) => {
    console.error("Error al abrir la base de datos:", e.target.error);
  }),
  document
    .querySelector("#folio")
    .addEventListener("input", async function (e) {
      let t = this.value.trim();
      var o = await obtenerRegistrosEstacionamiento();
      let n = moment(),
        a = n.format("MMM").toUpperCase(),
        i = o
          .filter((e) => e && e.folio && e.folio.startsWith(a))
          .find((e) => e.folio == t);
      if (i) {
        o = (await datosCategorias()).find((e) => e.id == i.categoria);
        let a = (await cargarDatosSistema()).slice(-1)[0],
          e = calcularCostoTotal(i.fechaEntrada, o),
          r = moment(i.fechaEntrada);
        o = moment.duration(n.diff(r)).asMinutes();
        let t = Math.ceil(o);
        "pagado" == i.estado
          ? (console.log("Ya está pagado..."),
            Swal.fire({
              icon: "error",
              title: "Oops...",
              text: `El folio ${i.folio} ya está pagado!`,
              footer:
                '<a href="#!" id="cerrarAlerta">¿Quieres imprimir ticket de cobro?</a>',
              didOpen: () => {
                document
                  .getElementById("cerrarAlerta")
                  .addEventListener("click", function () {
                    Swal.close();
                    let e = moment(i.fechaSalida);
                    var t = moment.duration(e.diff(r)).asMinutes();
                    let o = Math.ceil(t);
                    setTimeout(() => {
                      imprimirPlantilla(
                        a.negocio,
                        a.direccion,
                        r,
                        e.format("hh:mm A"),
                        o,
                        i.monto,
                        i.folio,
                        "Gracias por su preferencia!",
                        i.placa,
                        i.color
                      );
                    }, 1e3);
                  });
              },
            }))
          : ((i.fechaSalida = n.format("YYYY-MM-DD HH:mm:ss")),
            (i.monto = e),
            (i.estado = "pagado"),
            actualizarRegistro("estacionamiento", i),
            document
              .querySelector("#deleteTicket")
              .setAttribute("ticketNum", i.id),
            (document.querySelector("#folioNum").textContent = i.folio),
            (document.querySelector("#negocioEstacionamiento").textContent =
              a.negocio.toUpperCase()),
            (document.querySelector("#logoEstacionamiento").src = "" + logoImg),
            (document.querySelector("#fechaEntrada").textContent =
              "" + r.format("DD/MM/YYYY")),
            (document.querySelector("#horaEntrada").textContent =
              "Entrada: " + r.format("hh:mm A")),
            (document.querySelector("#horaSalida").textContent =
              "Salida: " + n.format("hh:mm A")),
            (document.querySelector(
              "#tiempo"
            ).textContent = `Tiempo: ${Math.ceil(o)} minutos`),
            (document.querySelector("#total").textContent = "Monto: $" + e),
            document.querySelector(".ticket").classList.remove("d-none"),
            JsBarcode(document.querySelector("#codigoBarras"), i.folio, {
              format: "CODE128",
              lineColor: "#000",
              width: 2,
              height: 50,
              displayValue: !1,
            }),
            setTimeout(() => {
              imprimirPlantilla(
                a.negocio,
                a.direccion,
                r,
                n.format("hh:mm A"),
                t,
                e,
                i.folio,
                "Gracias por su preferencia!",
                i.placa,
                i.color
              );
            }, 1e3));
      } else document.querySelector(".ticket").classList.add("d-none");
    }),
  document
    .querySelector("#buscarFolio")
    .addEventListener("input", async function (e) {
      let a = this.value.trim();
      var r = await obtenerRegistrosEstacionamiento();
      let n = moment(),
        t = n.format("MMM").toUpperCase();
      r = r.filter((e) => e && e.folio && e.folio.startsWith(t));
      let o = r.filter((e) => e.folio == a);
      if (0 < o.length) {
        let [t] = r.filter((e) => e.folio == a);
        var r = await datosCategorias(),
          [i] = (await cargarDatosSistema()).slice(-1),
          [r] = r.filter((e) => e.id == t.categoria);
        let e = calcularCostoTotal(t.fechaEntrada, r);
        r = moment(t.fechaEntrada);
        let o = moment.duration(n.diff(r)).asMinutes();
        "pagado" === t.estado
          ? ((n = moment(t.fechaSalida)),
            (e = t.monto),
            (o = moment.duration(n.diff(r)).asMinutes()),
            document.querySelector("#estadoPago").classList.remove("d-none"),
            console.log("Pagado..."))
          : document.querySelector("#estadoPago").classList.add("d-none"),
          document
            .querySelector("#deleteTicket")
            .setAttribute("ticketNum", t.id),
          (document.querySelector("#folioNum-dos").textContent = t.folio),
          (document.querySelector("#negocio-dos").textContent =
            i.negocio.toUpperCase()),
          (document.querySelector("#logoEstacionamiento-dos").src =
            "" + logoImg),
          (document.querySelector("#fechaEntrada-dos").textContent =
            "" + r.format("DD/MM/YYYY")),
          (document.querySelector("#horaEntrada-dos").textContent =
            "Entrada: " + r.format("hh:mm A")),
          (document.querySelector("#horaSalida-dos").textContent =
            "Salida: " + n.format("hh:mm A")),
          (document.querySelector(
            "#tiempo-dos"
          ).textContent = `Tiempo: ${Math.ceil(o)} minutos`),
          (document.querySelector("#total-dos").textContent = "Monto: $" + e),
          document.querySelector(".ticketDetalle").classList.remove("d-none"),
          JsBarcode(document.querySelector("#codigoBarras-dos"), t.folio, {
            format: "CODE128",
            lineColor: "#000",
            width: 2,
            height: 50,
            displayValue: !1,
          });
      } else document.querySelector(".ticketDetalle").classList.add("d-none");
    }),
  document.querySelector(".bloque-dos").addEventListener("click", (e) => {
    e.target.classList.contains("btn-danger") &&
      eliminarRegistro(
        "estacionamiento",
        parseInt(
          document.querySelector("#deleteTicket").getAttribute("ticketNum")
        )
      );
  }),
  document
    .querySelector(".ticketDetalle")
    .addEventListener("click", async (e) => {
      var t, o;
      e.target.closest(".btn-light") &&
        (([e] = (await cargarDatosSistema()).slice(-1)),
        (t = await obtenerRegistroPorIdEstacionamiento(
          parseInt(
            document.querySelector("#deleteTicket").getAttribute("ticketNum")
          )
        )),
        (o = moment(t.fechaEntrada)),
        imprimirPlantilla(
          e.negocio,
          e.direccion,
          o,
          "",
          "",
          "",
          t.folio,
          e.mensaje,
          t.marca,
          t.color
        ));
    }),
  document
    .querySelector("#folioPension")
    .addEventListener("input", async function (e) {
      let n = this.value.trim();
      var i = await obtenerRegistrosPension();
      let t = moment().format("MMM").toUpperCase();
      i = i.filter((e) => e && e.folio && e.folio.startsWith(t));
      let o = i.filter((e) => e.folio == n);
      if (0 < o.length) {
        let [t] = i.filter((e) => e.folio == n);
        var [i] = (await datosTipoPension()).filter((e) => e.id == t.tipo);
        let [o] = (await cargarDatosSistema()).slice(-1),
          a = i.precio,
          r = moment(t.fechaEntrada);
        (document.querySelector("#folioNumPension").textContent = t.folio),
          (document.querySelector("#negocioPension").textContent =
            o.negocio.toUpperCase()),
          (document.querySelector("#direccion").textContent = o.direccion),
          (document.querySelector("#logoPension").src = "" + logoImg),
          (document.querySelector("#entradaPension").textContent =
            r.format("DD/MM/YYYY h:mm:ss")),
          (document.querySelector("#totalPension").textContent =
            "Monto: $" + a),
          document.querySelector(".ticketPension").classList.remove("d-none"),
          JsBarcode(document.querySelector("#codigoBarrasPension"), t.folio, {
            format: "CODE128",
            lineColor: "#000",
            width: 2,
            height: 50,
            displayValue: !1,
          }),
          document
            .querySelector(".impresionTicket")
            .addEventListener("click", (e) => {
              e.target.closest(".btn-light") &&
                imprimirPlantillaPension(
                  o.negocio,
                  o.direccion,
                  r.format("DD/MM/YYYY hh:mm"),
                  moment().format("DD/MM/YYYY hh:mm"),
                  a,
                  t.folio,
                  o.mensaje,
                  t.marca,
                  t.color
                );
            });
      } else document.querySelector(".ticketPension").classList.add("d-none");
    }),
  document.querySelector("#reporte").addEventListener("click", async () => {
    var e = await obtenerRegistrosEstacionamiento(),
      t = await obtenerRegistrosPension();
    let a = await datosTipoPension();
    var o = await obtenerRegistrosServicios();
    let r = await datosTipoServicio();
    var n = await obtenerRegistrosGastos();
    let i = e.reduce((e, t) => e + (t.monto || 0), 0),
      c = t.reduce((e, t) => {
        var o = a.find((e) => e.id == t.tipo);
        return o && (e += parseFloat(o.precio)), e;
      }, 0),
      s = o.reduce((e, t) => {
        var o = r.find((e) => e.id == t.tipo);
        return (
          o && (e += parseFloat(o.precioServicio) * parseFloat(t.cantidad)), e
        );
      }, 0),
      l = n.reduce((e, t) => e + (parseFloat(t.cantidad) || 0), 0);
    navigator.onLine
      ? (await backup(e, t, o, n)).success &&
        (Swal.fire({
          position: "top-end",
          icon: "success",
          title: "Respaldo Guardado!",
          showConfirmButton: !1,
          timer: 1500,
        }),
        setTimeout(() => {
          abrirVentanaReporte(i, l, c, s);
        }, 2e3))
      : Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "No tienes conexión a internet, intentalo mas tarde!",
        });
  });
